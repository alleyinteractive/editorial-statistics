<?php
/*
 Plugin Name: Editorial Statistics
 Description: Allows editors to view posts published per author, content type, and/or taxonomy term within a specified date range.
 Author: Alley Interactive (Bradford Campeau-Laurion)
 Version: 0.1
 Author URI: http://alleyinteractive.com
 */

class Editorial_Statistics {
	private static $__instance = NULL;

	/** @type string Prefix to use for all plugin fields and settings */
	private $prefix = 'editorial_statistics_';
	
	/** @type string i18n name */
	private $i18n = 'editorial_statistics';
	
	/** @type string Plugin name */
	private $plugin_name = 'Editorial Statistics'; 

	/** @type array Errors generated by the plugin */
	public $errors = array();
	
	/** @type array Available report columns */
	public $report_columns = array( 'author', 'content_type', 'term' );
	
	/** @type string Screen ID */
	private $screen_id = 'tools_page_editorial-statistics'; 
	

	/**
	 * Constructor
	 *
	 * @access public
	 * @return void
	 */
	function __construct() {

	}


	/**
	 * Init function
	 *
	 * @access public
	 * @static
	 * @return void
	 */
	public static function init() {
		self::instance()->prepare();
	}


	/**
	 * Return singleton instance for this class
	 *
	 * @access public
	 * @static
	 * @return object Singleton instance for this class
	 */
	public static function instance() {
		if ( self::$__instance == NULL )
			self::$__instance = new Editorial_Statistics;
		return self::$__instance;
	}


	/**
	 * Prepare settings, variables and hooks
	 *
	 * @access public
	 * @return void
	 */
	public function prepare() {
		register_activation_hook( __FILE__, array( $this, 'dependencies' ) );
		add_action( 'init', array( &$this, 'setup_plugin' ) );
	}
	
	
	/**
	 * Handle plugin dependencies on activation
	 *
	 * @return void
	 */
	function dependencies() {
		$coauthors_plus_dependency = new Plugin_Dependency( $this->plugin_name, 'Co-Authors Plus', 'http://wordpress.org/extend/plugins/co-authors-plus/' );
		if( !$coauthors_plus_dependency->verify() ) {
			// Cease activation
			die( $coauthors_plus_dependency->message() );
		}
	}


	/**
	 * Initialize menus and scripts
	 *
	 * @access public
	 * @return void
	 */
	public function setup_plugin() {
		add_action( 'admin_menu', array( &$this, 'register_management_page' ) );
		add_action( 'admin_enqueue_scripts', array( &$this, 'enqueue_scripts' ) );
	}


	/**
	 * Enqueue required scripts
	 *
	 * @access public
	 * @return void
	 */
	public function enqueue_scripts() {
		// Only enqueue the scripts for the Editorial Statistics report screen
		$screen = get_current_screen();

		if ( $screen->id == $this->screen_id ) {
			// Enqueue and localize variables used by the plugin script
			wp_enqueue_script( $this->prefix . 'js', plugin_dir_url( __FILE__ ) . 'js/editorial-statistics.js', false, '1.0', true );
			$settings = array(
				'prefix'    => $this->prefix
			);
			wp_localize_script( $this->prefix . 'js', $this->i18n, $settings );
			
			// Add chosen.js for the taxonomy selection field
			wp_enqueue_script( 'chosen', plugin_dir_url( __FILE__ ) . 'js/chosen/chosen.jquery.min.js', false, '1.0', true );
			wp_enqueue_style( 'chosen_css', plugin_dir_url( __FILE__ ) . 'js/chosen/chosen.css', false, '1.0' );
		
			// Enqueue the plugin styles
			wp_enqueue_style( $this->prefix . 'css', plugin_dir_url( __FILE__ ) . 'css/editorial-statistics.css', false, '1.0' );
			wp_enqueue_style( 'jquery.ui.theme', plugin_dir_url( __FILE__ ) . 'css/jquery-ui/jquery-ui-1.10.3.custom.css', false, '1.10.3' );
		
			// Include the jquery datepicker for the report date range
			wp_enqueue_script( 'jquery-ui-datepicker' );
		}
	}
	
	
	/**
	 * Create the tools menu item for running editorial statistics reports
	 *
	 * @access public
	 * @return void
	 */
	public function register_management_page() {
		add_management_page( __( $this->plugin_name ), __( $this->plugin_name ), 'edit_others_posts', 'editorial-statistics', array( &$this, 'management_page' ) );
	}
	
	
	/**
	 * Output the management page for running editorial statistics reports
	 *
	 * @access public
	 * @return void
	 */
	public function management_page() {
		?>
			<div class="wrap">
				<?php screen_icon(); ?>
				<h2><?php _e( $this->plugin_name, $this->i18n ) ?></h2>
	
				<form method="post" action="">
					
					<?php wp_nonce_field( $this->prefix . 'nonce' ) ?>
			
					<table class="form-table">
						<tr valign="top">
							<th scope="row">
								<label for="<?php echo $this->prefix ?>_report_columns">
									<div>
										<b><?php _e( 'Start Date', $this->i18n ) ?></b>
									</div>
									<div><?php _e( 'Choose the start date for the report.', $this->i18n ) ?></div>
								</label>
							</th>
							<td>
								<?php 
									// TODO - some logic here to select date when report page refreshes 
								?>
								<input type="text" name="<?php echo $this->prefix ?>start_date" id="<?php echo $this->prefix ?>start_date" />
							</td>
						</tr>
						<tr valign="top">
							<th scope="row">
								<label for="<?php echo $this->prefix ?>_report_columns">
									<div>
										<b><?php _e( 'End Date', $this->i18n ) ?></b>
									</div>
									<div><?php _e( 'Choose the end date for the report.', $this->i18n ) ?></div>
								</label>
							</th>
							<td>
								<?php 
									// TODO - some logic here to select date when report page refreshes 
								?>
								<input type="text" name="<?php echo $this->prefix ?>end_date" id="<?php echo $this->prefix ?>end_date" />
							</td>
						</tr>
						<tr valign="top">
							<th scope="row">
								<label for="<?php echo $this->prefix ?>_report_columns">
									<div>
										<b><?php _e( 'Report Columns', $this->i18n ) ?></b>
									</div>
									<div><?php _e( 'Choose the columns to display in the report (at least one is required).', $this->i18n ) ?></div>
								</label>
							</th>
							<td>
								<?php foreach( $this->report_columns as $report_column ): ?>
									<?php 
										// TODO - test logic here to select checkboxes when the report page refreshes to load the report
										echo sprintf(
											'<input type="checkbox" value="%s" name="%s_report_columns[]" id="%s_report_columns_%s" class="postform" %s />',
											$report_column,
											$this->prefix,
											$this->prefix,
											$report_column,
											( isset( $_POST[$this->prefix . '_report_columns'] ) && in_array( $report_columm, $_POST[$this->prefix . '_report_columns'] ) ) ? ' checked="checked"' : ''
										);
									?>
									<?php _e( ucwords( str_replace( '_', ' ', $report_column ) ), $this->i18n ) ?>
									<br />
								<?php endforeach; ?>
							</td>
						</tr>
						<tr valign="top" id="<?php echo $this->prefix ?>terms_wrapper" class="editorial-statistics-filter" >
							<th scope="row">
								<label for="<?php echo $this->prefix ?>terms">
									<div>
										<b><?php _e( 'Choose Taxonomies' ) ?></b>
									</div>
									<div><?php _e( 'Choose which taxonomies should be included in the term column (at least one is required).', $this->i18n ) ?></div>
								</label>
							</th>
							<td>
								<?php 
									echo sprintf(
										'<select multiple="multiple" class="chzn-select" name="%s" id="%s">%s</select>',
										$this->prefix . 'terms',
										$this->prefix . 'terms',
										$this->get_taxonomy_options()
									);
								?>
							</td>
						</tr>
					</table>
	
					<p class="submit">
						<?php submit_button( __( 'Create Report' ), 'primary', $this->prefix . 'submit', false ); ?>
					</p>
	
				</form>
			</div>
		<?php
	}
	
	
	/**
	 * Builds the list of options for the taxonomy selection field
	 * 
	 * @access private
	 * @return string
	 */
	private function get_taxonomy_options() {
		// Initialize the container for the taxonomy options list
		$taxonomy_options = '';

		// Get the list of available taxonomies.
		// Just return an empty string if this blank for some reason.
		$taxonomies = $this->get_taxonomies();
		if ( empty( $taxonomies ) || !is_array( $taxonomies ) )
			return $taxonomy_options;
			
		foreach( $taxonomies as $taxonomy ) {
			$taxonomy_options .= sprintf(
				'<option value="%s" %s>%s</option>',
				$taxonomy->name,
				'', // TODO - add logic to set selected when page refreshes to load report
				$taxonomy->label
			);
		}
		
		return $taxonomy_options;
	}


	/**
	 * Get the list of post types for use in filtering reports
	 *
	 * @access private
	 * @return array
	 */
	private function get_post_types() {
		// Only return post types that are shown in the admin interface.
		// Otherwise, the list could be confusing to editors or provide invalid options.
		return get_post_types(
			array( 
				'public' => true,
				'show_ui' => true
			),
			'objects'
		);
	}


	/**
	 * Get the list of taxonomies for use in filtering reports
	 *
	 * @access private
	 * @return array
	 */
	private function get_taxonomies() {
		// Only return taxonomies that are shown in the admin interface.
		// Otherwise, the list could be confusing to editors or provide invalid options.
		return get_taxonomies(
			array( 
				'public' => true,
				'show_ui' => true
			),
			'objects'
		);
	}
	
	
	/**
	 * Get the list of authors for use in filtering reports
	 *
	 * @access private
	 * @return array
	 */
	private function get_authors() {
		// Only return taxonomies that are shown in the admin interface.
		// Otherwise, the list could be confusing to editors or provide invalid options.
		return coauthors_wp_list_authors(
			array( 
				'html' => false,
				'hide_empty' => false,
				'echo' => false,
				'show_fullname' => true
			)
		);
	}
	

	/**
	 * Log an error
	 *
	 * @param string $message 
	 * @return bool false
	 * @author Matthew Boynes
	 */
	private function error( $message ) {
		$this->errors[] = $message;
		return false;
	}


	/**
	 * Display any errors on the site
	 *
	 * @return void
	 */
	public function display_errors() {
		if ( count( $this->errors ) ) :
		?>
		<div id="message" class="error">
			<p>
				<?php echo _n( 'There was an issue retrieving your user account: ', 'There were issues retrieving your user account: ', count( $this->errors ), $this->i18n ) ?>
				<br /> &bull; <?php echo implode( "\n\t\t\t\t<br /> &bull; ", $this->errors ) ?>
			</p>
		</div>
		<?php
		endif;
	}

}

Editorial_Statistics::init();